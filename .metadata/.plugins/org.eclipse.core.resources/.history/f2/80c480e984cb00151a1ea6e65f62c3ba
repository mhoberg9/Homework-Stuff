package de.tuberlin.ise.prog1.client;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutput;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

import Prog1Tools.IOTools;
import de.tuberlin.ise.prog1.authentication.Authenticator;

/**
 * 
 * @author jacobeberhardt
 *
 */
public class Client {

	public static final String FIRST_NAME = "MALTE";
	public static final String LAST_NAME = "HOBERG";
	public static final String outputpath = "C:/Users/maltehoberg/Desktop/server19/uploadhallo.txt";
	public static final String inputpath = "C:/Users/maltehoberg/Desktop/server19/";

	public static void main(String[] args) throws UnknownHostException, IOException {
		// generate hash
		byte[] hash = Authenticator.getHash(FIRST_NAME, LAST_NAME);
		System.out.println("Hello Client!");
		int command = IOTools.readInt("What do you want to do? " + "Press 1-upload, 2-download, 3-list all items");
		Socket s = new Socket("52.29.112.167", 8080);
		DataOutputStream output = new DataOutputStream(s.getOutputStream());
		DataInputStream check = new DataInputStream(s.getInputStream());
		
		
		switch (command) {
		case 1:

			/**
			 * IN
			 */

			// Socket s = new Socket("52.28.100.108", 8080);
			File upload = new File(outputpath);
			BufferedInputStream input = new BufferedInputStream(new FileInputStream(upload));

			// hash authentication
			s.getOutputStream().write(hash);
			if (s.isConnected()) {
				System.out.println("You are connected to 52.29.112.167 :8080");
			}

			// op-code
			output.writeByte(0);

			// ID
			long id = IOTools.readLong("Please enter your ID: ");
			output.writeLong(id);

			// filesize
			output.writeLong(upload.length());
			byte[] uploadarray = new byte[(int) upload.length()];

			// file
			input.read(uploadarray);
			output.write(uploadarray, 0, uploadarray.length);;

			/**
			 * OUT
			 */

			// satuscode
			try {
				filecheck(check.readByte());
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			output.close();
			input.close();
			check.close();
			s.close();

			return;
		case 2:

			/**
			 * IN
			 */

			Socket d = new Socket("52.28.100.108", 8080);
			if (d.isConnected()) {
				System.out.println("You are connected to 52.28.100.108:8080");
			}

			DataOutputStream output1 = new DataOutputStream(d.getOutputStream());
			DataInputStream input1 = new DataInputStream(d.getInputStream());

			// hash authentication
			output1.write(hash);

			// op-code
			output1.writeByte(1);

			// ID
			long id1 = IOTools.readInt("Please enter your ID: ");
			output1.writeLong(id1);

			/**
			 * OUT
			 */

			// filesize
			File download = new File(inputpath);
			long downloadsize = input1.readLong();
			byte[] downloadarray = new byte[(int) downloadsize];

			// file
			for (int c = 0; c <= (int) downloadsize; c++) {
				downloadarray[c] = input1.readByte();
				FileOutputStream outtodata = new FileOutputStream(inputpath);
				outtodata.write(downloadarray);
			}

			// statuscode
			DataInputStream check1 = new DataInputStream(d.getInputStream());
			try {
				filecheck(check1.readByte());
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			output1.close();
			input1.close();
			check1.close();
			d.close();

			return;

		case 3:
			// list all items
			/**
			 * IN
			 */
			Socket l = new Socket("52.28.100.108", 8080);
			if (l.isConnected()) {
				System.out.println("You are connected to 52.28.100.108:8080");
			}

			DataOutputStream output2 = new DataOutputStream(l.getOutputStream());
			DataInputStream input2 = new DataInputStream(l.getInputStream());

			// hash
			output2.write(hash);

			// op-code
			output2.writeByte(2);

			/**
			 * OUT
			 */

			// listsize

			long listsize = input2.readLong();

			// list

			for (long k = 0; k <= listsize; k++) {
				System.out.println(input2.readLong());
			}

			// statuscode
			DataInputStream check2 = new DataInputStream(l.getInputStream());
			try {
				filecheck(check2.readByte());
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();

			}

			output2.close();
			input2.close();
			check2.close();
			l.close();

			return;
		}
	}

	private static void filecheck(byte readByte) throws Exception {
		switch (readByte) {
		case 0:
			System.out.println("Success");
			return;
		case 1:
			System.out.println("Error");
			return;
		case 2:
			System.out.println("Unknown	Command");
			return;
		case 3:
			System.out.println("Hash Invalid");
			return;
		}

	}

}
